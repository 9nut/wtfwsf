/*
 * Check a Washington State Ferry pass for the balance remaining. These passes
 * contain a 1D barcode. It uses the ZXING barcode scanner to read the barcode
 * and looks up the ticket and the balance from a WSF HTML page. Despite the fact
 * that WA DOT has a good set of API's for many things (see below), it doesn't have
 * one for looking up tickets -- which is why we resort to HTML scraping.
 * 
 * Reference:
 * ZXING Team:
 * https://github.com/zxing/zxing
 * WSDOT API's website
 * http://www.wsdot.wa.gov/traffic/api/
 */
package com.tavakkolian.wtfwsf;

import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import com.google.zxing.integration.android.IntentIntegrator;
import com.google.zxing.integration.android.IntentResult;

import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.widget.TextView;

import java.util.Map;

/**
 * can't get any simpler
 */
public class TicketChecker extends Activity {
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_tciket_checker);
	}
	
	/*
	 * Everything above here is auto-generated by Eclipse and Android plugin upon project
	 * creation.
	 */
	public void onScanButtonPressed(View view) {
		// send an intent to zxing barcode scanner
		IntentIntegrator integrator = new IntentIntegrator(this);
		integrator.initiateScan();
	}

	private static final String WSFMagicCookiesURL = "https://wave2go.wsdot.com/Webstore/Content.aspx?Kind=LandingPage&CG=21&C=10";
	private static final String WSFTicketLookupURL = "https://wave2go.wsdot.com/WebStore/account/TicketLookup.aspx?VisualID=";
	
	public void onActivityResult(int requestCode, int resultCode, Intent intent) {
		IntentResult scanResult = IntentIntegrator.parseActivityResult(requestCode, resultCode, intent);
		if (scanResult != null) {
			String barcode = scanResult.getContents();
			TextView bcview = (TextView) findViewById(R.id.barcodeView);
			bcview.setText(barcode);
			new GetBalanceTask().execute(barcode);
		} else {
			TextView bcview = (TextView) findViewById(R.id.barcodeView);
			bcview.setText("No barcode detected");
		}
	}
	
	private class GetBalanceTask extends AsyncTask<String, Void, String> {
		@Override
		protected void onPreExecute(){
			super.onPreExecute();
			TextView tv = (TextView) findViewById(R.id.balanceView);
			tv.setText("...");
		}
		@Override
		protected String doInBackground(String... params) {
			Map<String, String> cookies = null;
			String result = "Failed. Try Again.";

			try {
				Connection.Response resp = Jsoup.connect(WSFMagicCookiesURL).method(Connection.Method.GET).execute();
				cookies = resp.cookies();

			} catch (Exception e){
				e.printStackTrace();
				return result;
			}

			try {
				String url = WSFTicketLookupURL+params[0];	// params[0] is the barcode
				Document doc = Jsoup.connect(url).cookies(cookies).get();

				// Log.d("doInBackground",doc.select("table#ctl00_ContentPlaceHolder_TicketInfo").toString());
				Elements e = doc.select(
						"table#ctl00_ContentPlaceHolder_TicketInfo tr:last-child td:eq(1)");
				if (e != null) {
					result = e.get(0).ownText();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

			return result;
		}
		
		@Override
		protected void onPostExecute(String result){
			super.onPostExecute(result);
			TextView tv = (TextView) findViewById(R.id.balanceView);
			tv.setText(result);
		}
	}
}
